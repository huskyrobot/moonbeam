initSidebarItems({"fn":[["derive_bip44_pairs_from_mnemonic","Helper function to derive `num_accounts` child pairs from mnemonics Substrate derive function cannot be used because the derivation is different than Ethereum’s https://substrate.dev/rustdocs/v2.0.0/src/sp_core/ecdsa.rs.html#460-470"],["generate_accounts","Function to generate accounts given a mnemonic and a number of child accounts to be generated Defaults to a default mnemonic if no mnemonic is supplied"],["get_account_id_from_pair","Helper function to get an AccountId from Key Pair We need the full decompressed public key to derive an ethereum-style account Substrate does not provide a method to obtain the full decompressed public key Therefore, this function uses the secp256k1_ecdsa_recover method to recover the full key A solution without using the private key would imply solving the secp256k1 curve equation The latter is currently not possible with current substrate methods"],["get_from_seed","Helper function to generate a crypto pair from seed"]],"mod":[["fake_spec",""],["moonbase","Moonbase Chain Specifications and utilities for building them."],["moonbeam","Moonbeam Chain Specifications and utilities for building them."],["moonriver","Moonriver Chain Specifications and utilities for building them."],["test_spec","Embedded specs for testing purposes, must be compiled with –features=test-spec"]],"struct":[["Extensions",""],["ExtensionsFork",""]],"type":[["AccountId","Some way of identifying an account on the chain. We intentionally make it equivalent to the public key of our transaction signing scheme."],["RawChainSpec",""]]});