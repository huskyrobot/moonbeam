initSidebarItems({"enum":[["Client","A client instance of Moonbeam."],["RuntimeVariant","Trivial enum representing runtime variant"],["TransactionConverters","`fp_rpc::ConvertTransaction` is implemented for an arbitrary struct that lives in each runtime. It receives a ethereum::Transaction and returns a pallet-ethereum transact Call wrapped in an UncheckedExtrinsic."]],"fn":[["frontier_database_dir",""],["new_chain_ops","Builds a new object suitable for chain operations."],["new_dev","Builds a new development service. This service uses manual seal, and mocks the parachain inherent."],["new_partial","Builds the PartialComponents for a parachain or development service"],["open_frontier_backend",""],["start_node","Start a normal parachain node."]],"mod":[["chain_spec",""],["rpc","A collection of node-specific RPC extensions and related background tasks."]],"struct":[["MoonbaseExecutor",""],["MoonbeamExecutor",""],["MoonriverExecutor",""]],"trait":[["AbstractClient","Config that abstracts over all available client implementations."],["ClientHandle","A handle to a Moonbeam client instance."],["ExecuteWithClient","Execute something with the client instance."],["IdentifyVariant","Can be called for a `Configuration` to check if it is a configuration for the `Moonbeam` network."],["RuntimeApiCollection","A set of APIs that polkadot-like runtimes must implement."]],"type":[["AccountId","Some way of identifying an account on the chain. We intentionally make it equivalent to the public key of our transaction signing scheme."],["Balance","Balance of an account."],["Block",""],["BlockNumber","An index to a block."],["Hash","A hash of some data used by the chain."],["Header","Block header type as expected by this runtime."],["HostFunctions",""],["Index","Index of a transaction in the chain."]]});