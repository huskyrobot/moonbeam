initSidebarItems({"attr":[["generate_function_selector","This macro allows to associate to each variant of an enumeration a discriminant (of type u32 whose value corresponds to the first 4 bytes of the Hash Keccak256 of the character string indicated by the user of this macro."]],"fn":[["error","Return an error with provided (static) text."]],"macro":[["keccak256",""]],"struct":[["Address","The `address` type of Solidity. H160 could represent 2 types of data (bytes20 and address) that are not encoded the same way. To avoid issues writing H160 is thus not supported."],["Bytes","The `bytes`/`string` type of Solidity. It is different from `Vec<u8>` which will be serialized with padding for each `u8` element of the array, while `Bytes` is tightly packed."],["EvmDataReader","Wrapper around an EVM input slice, helping to parse it. Provide functions to parse common types."],["EvmDataWriter","Help build an EVM input/output data."],["Gasometer","Custom Gasometer to record costs in precompiles. It is advised to record known costs as early as possible to avoid unecessary computations if there is an Out of Gas."],["LogsBuilder","Builder for PrecompileOutput."],["RuntimeHelper","Helper functions requiring a Runtime. This runtime must of course implement `pallet_evm::Config`."]],"trait":[["EvmData","Data that can be converted from and to EVM data types."]],"type":[["EvmResult","Alias for Result returning an EVM precompile error."]]});